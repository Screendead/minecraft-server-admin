name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'
        channel: 'stable'
        cache: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Firebase CLI
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          /opt/hostedtoolcache/node/18.20.8/x64/lib/node_modules/firebase-tools
          /opt/hostedtoolcache/node/18.20.8/x64/bin/firebase
        key: ${{ runner.os }}-firebase-cli-v13
        restore-keys: |
          ${{ runner.os }}-firebase-cli-
        
    - name: Install Firebase CLI
      run: |
        # Check if firebase-tools is already installed globally
        export PATH="$PATH:$(npm config get prefix)/bin"
        echo "Checking for Firebase CLI..."
        echo "PATH: $PATH"
        echo "npm prefix: $(npm config get prefix)"
        
        # Check if firebase binary exists in common locations
        if [ -f "/usr/local/bin/firebase" ] || [ -f "$(npm config get prefix)/bin/firebase" ]; then
          echo "Firebase CLI found in filesystem, checking version..."
          firebase --version
        elif command -v firebase &> /dev/null; then
          echo "Firebase CLI found in PATH, checking version..."
          firebase --version
        else
          echo "Installing Firebase CLI..."
          npm install -g firebase-tools@13 --no-audit --no-fund
        fi
      
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          app/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('app/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
        
    - name: Install Flutter dependencies
      run: |
        cd app
        flutter pub get
        
    - name: Run Flutter tests with coverage
      run: |
        cd app
        flutter test --coverage
        
    - name: Setup LCOV
      uses: hrishikesh-kadam/setup-lcov@v1
      
    - name: Generate coverage report
      uses: zgosalvez/github-actions-report-lcov@v4
      with:
        coverage-files: app/coverage/lcov.info
        artifact-name: code-coverage-report
        github-token: ${{ secrets.GITHUB_TOKEN }}
        working-directory: app
        update-comment: true
        
    - name: Build Flutter iOS app
      run: |
        cd app
        flutter build ios --no-codesign
        
    - name: Upload iOS build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-pr-${{ github.event.pull_request.number }}
        path: app/build/ios/
        retention-days: 7
        
    - name: Comment PR with build status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ðŸš€ iOS Build completed')
          );
          
          const commentBody = `## ðŸš€ iOS Build completed!
          
          **Build Status:** âœ… Success
          **Platform:** iOS only
          **Bundle ID:** com.screendead.servers
          **Coverage Report:** Available in artifacts
          
          The iOS build artifact has been uploaded and will be available for 7 days.
          
          ---
          *This comment will be updated automatically.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

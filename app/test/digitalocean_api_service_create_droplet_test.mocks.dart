// Mocks generated by Mockito 5.4.6 from annotations
// in app/test/digitalocean_api_service_create_droplet_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:convert' as _i4;
import 'dart:typed_data' as _i6;
import 'dart:ui' as _i8;

import 'package:app/models/log_entry.dart' as _i9;
import 'package:app/services/logging_service.dart' as _i7;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<_i6.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i3.Future<_i6.Uint8List>);

  @override
  _i3.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i3.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i3.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i7.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void setUserId(String? userId) => super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> logDebug(
    String? message, {
    _i9.LogCategory? category = _i9.LogCategory.system,
    String? details,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logDebug,
          [message],
          {
            #category: category,
            #details: details,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logInfo(
    String? message, {
    _i9.LogCategory? category = _i9.LogCategory.system,
    String? details,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logInfo,
          [message],
          {
            #category: category,
            #details: details,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logWarning(
    String? message, {
    _i9.LogCategory? category = _i9.LogCategory.system,
    String? details,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logWarning,
          [message],
          {
            #category: category,
            #details: details,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logError(
    String? message, {
    _i9.LogCategory? category = _i9.LogCategory.error,
    String? details,
    Map<String, dynamic>? metadata,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [message],
          {
            #category: category,
            #details: details,
            #metadata: metadata,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logFatal(
    String? message, {
    _i9.LogCategory? category = _i9.LogCategory.error,
    String? details,
    Map<String, dynamic>? metadata,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logFatal,
          [message],
          {
            #category: category,
            #details: details,
            #metadata: metadata,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logUserInteraction(
    String? action, {
    String? details,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logUserInteraction,
          [action],
          {
            #details: details,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logApiCall(
    String? endpoint,
    String? method, {
    int? statusCode,
    Duration? duration,
    String? details,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logApiCall,
          [
            endpoint,
            method,
          ],
          {
            #statusCode: statusCode,
            #duration: duration,
            #details: details,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i9.LogEntry> getLogs() => (super.noSuchMethod(
        Invocation.method(
          #getLogs,
          [],
        ),
        returnValue: <_i9.LogEntry>[],
      ) as List<_i9.LogEntry>);

  @override
  List<_i9.LogEntry> getFilteredLogs(_i9.LogFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredLogs,
          [filter],
        ),
        returnValue: <_i9.LogEntry>[],
      ) as List<_i9.LogEntry>);

  @override
  List<_i9.LogEntry> getLogsByLevel(_i9.LogLevel? level) => (super.noSuchMethod(
        Invocation.method(
          #getLogsByLevel,
          [level],
        ),
        returnValue: <_i9.LogEntry>[],
      ) as List<_i9.LogEntry>);

  @override
  List<_i9.LogEntry> getLogsByCategory(_i9.LogCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsByCategory,
          [category],
        ),
        returnValue: <_i9.LogEntry>[],
      ) as List<_i9.LogEntry>);

  @override
  List<_i9.LogEntry> getRecentLogs(int? count) => (super.noSuchMethod(
        Invocation.method(
          #getRecentLogs,
          [count],
        ),
        returnValue: <_i9.LogEntry>[],
      ) as List<_i9.LogEntry>);

  @override
  _i3.Future<void> clearLogs() => (super.noSuchMethod(
        Invocation.method(
          #clearLogs,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearOldLogs(int? days) => (super.noSuchMethod(
        Invocation.method(
          #clearOldLogs,
          [days],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> exportLogsToJson({_i9.LogFilter? filter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportLogsToJson,
          [],
          {#filter: filter},
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #exportLogsToJson,
            [],
            {#filter: filter},
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> exportLogsToCsv({_i9.LogFilter? filter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportLogsToCsv,
          [],
          {#filter: filter},
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #exportLogsToCsv,
            [],
            {#filter: filter},
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> exportLogsToText({_i9.LogFilter? filter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportLogsToText,
          [],
          {#filter: filter},
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #exportLogsToText,
            [],
            {#filter: filter},
          ),
        )),
      ) as _i3.Future<String>);
}

// Mocks generated by Mockito 5.4.6 from annotations
// in app/test/api_key_migration_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:app/services/encryption_service.dart' as _i4;
import 'package:app/services/ios_biometric_encryption_service.dart' as _i8;
import 'package:app/services/ios_secure_api_key_service.dart' as _i6;
import 'package:local_auth/local_auth.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i2.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i3.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [EncryptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEncryptionService extends _i1.Mock implements _i4.EncryptionService {
  MockEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String encrypt(
    String? text,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #encrypt,
          [
            text,
            password,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #encrypt,
            [
              text,
              password,
            ],
          ),
        ),
      ) as String);

  @override
  String decrypt(
    String? encryptedText,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #decrypt,
          [
            encryptedText,
            password,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #decrypt,
            [
              encryptedText,
              password,
            ],
          ),
        ),
      ) as String);
}

/// A class which mocks [IOSSecureApiKeyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSSecureApiKeyService extends _i1.Mock
    implements _i6.IOSSecureApiKeyService {
  MockIOSSecureApiKeyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> storeApiKey(String? apiKey) => (super.noSuchMethod(
        Invocation.method(
          #storeApiKey,
          [apiKey],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getApiKey() => (super.noSuchMethod(
        Invocation.method(
          #getApiKey,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> updateApiKey(String? newApiKey) => (super.noSuchMethod(
        Invocation.method(
          #updateApiKey,
          [newApiKey],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> hasApiKey() => (super.noSuchMethod(
        Invocation.method(
          #hasApiKey,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> clearApiKey() => (super.noSuchMethod(
        Invocation.method(
          #clearApiKey,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> getKeyMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getKeyMetadata,
          [],
        ),
        returnValue: _i3.Future<Map<String, dynamic>?>.value(),
      ) as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<bool> isBiometricAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isBiometricAvailable,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i7.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i3.Future<List<_i7.BiometricType>>.value(<_i7.BiometricType>[]),
      ) as _i3.Future<List<_i7.BiometricType>>);
}

/// A class which mocks [IOSBiometricEncryptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSBiometricEncryptionService extends _i1.Mock
    implements _i8.IOSBiometricEncryptionService {
  MockIOSBiometricEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> isBiometricAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isBiometricAvailable,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i7.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i3.Future<List<_i7.BiometricType>>.value(<_i7.BiometricType>[]),
      ) as _i3.Future<List<_i7.BiometricType>>);

  @override
  _i3.Future<String> encryptWithBiometrics(String? data) => (super.noSuchMethod(
        Invocation.method(
          #encryptWithBiometrics,
          [data],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #encryptWithBiometrics,
            [data],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> decryptWithBiometrics() => (super.noSuchMethod(
        Invocation.method(
          #decryptWithBiometrics,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #decryptWithBiometrics,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<bool> hasEncryptedData() => (super.noSuchMethod(
        Invocation.method(
          #hasEncryptedData,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>?> getKeyMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getKeyMetadata,
          [],
        ),
        returnValue: _i3.Future<Map<String, dynamic>?>.value(),
      ) as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<void> clearEncryptedData() => (super.noSuchMethod(
        Invocation.method(
          #clearEncryptedData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
